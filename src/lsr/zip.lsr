;   Copyright (c) Rich Hickey. All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
;   which can be found in the file CPL.TXT at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

;functional hierarchical zipper, with navigation, editing and enumeration
;see Huet

;; (ns clojure.zip
;;     (:refer-clojure :exclude (replace remove)))

(las3r/in-ns 'las3r.zip)
(las3r/refer 'las3r :exclude '(replace remove))

;; TODO: Use real peek and pop?

(defn peek [x]
  (if (vector? x)
    (last x)
    (first x)))

(defn pop [x]
  (if (vector? x)
    (drop-last x)
    (rest x)))

(defn zipper
  "Creates a new zipper structure. 

  branch? is a fn that, given a node, returns true if can have
  children, even if it currently doesn't.

  children is a fn that, given a branch node, returns a seq of its
  children.

  make-node is a fn that, given an existing node and a seq of
  children, returns a new branch node with the supplied children.
  root is the root node."  
  [branch? children make-node root]
  (with-meta [root nil] {:zip/branch? branch? :zip/children children :zip/make-node make-node}))

(defn seq-zip
  "Returns a zipper for nested sequences, given a root sequence"
  [root]
    (zipper seq? identity (fn [node children] children) root))

(defn vector-zip
  "Returns a zipper for nested vectors, given a root vector"
  [root]
    (zipper vector? seq (fn [node children] (apply vector children)) root))

(defn xml-zip
  "Returns a zipper for xml elements (as from xml/parse),
  given a root element"
  [root]
    (zipper (complement string?) 
            (fn [node] (seq (get node :content)))
            (fn [node children]
              (assoc node :content (and children (apply vector children))))
            root))

(defn node
  "Returns the node at loc"
  [loc] (get loc 0))

(defn branch?
  "Returns true if the node at loc is a branch"
  [loc]
    ((get ^loc :zip/branch?) (node loc)))

(defn children
  "Returns a seq of the children of node at loc, which must be a branch"
  [loc]
    ((get ^loc :zip/children) (node loc)))

(defn make-node
  "Returns a new branch node, given an existing node and new
  children. The loc is only used to supply the constructor."
  [loc node children]
    ((get ^loc :zip/make-node) node children))

(defn path
  "Returns a seq of nodes leading to this loc"
  [loc]
    (get (get loc 1) :pnodes))

(defn lefts
  "Returns a seq of the left siblings of this loc"
  [loc]
    (seq (get (get loc 1) :l)))

(defn rights
  "Returns a seq of the right siblings of this loc"
  [loc]
    (get (get loc 1) :r))


(defn down
  "Returns the loc of the leftmost child of the node at this loc, or
  nil if no children"
  [loc]
    (let [[node path] loc
          [c & crest :as cs] (children loc)]
      (when cs
        (with-meta [c {:l [] 
                       :pnodes (if path (conj (get path :pnodes) node) [node]) 
                       :ppath path 
                       :r crest}] ^loc))))

(defn up
  "Returns the loc of the parent of the node at this loc, or nil if at
  the top"
  [loc]
    (let [[node {l :l, ppath :ppath, pnodes :pnodes r :r, changed? :changed?, :as path}] loc]
      (when pnodes
        (let [pnode (peek pnodes)]
          (with-meta (if changed?
                       [(make-node loc pnode (concat l (cons node r))) 
                        (and ppath (assoc ppath :changed? true))]
                       [pnode ppath])
		     ^loc)))))

(defn root
  "zips all the way up and returns the root node, reflecting any
 changes."
  [loc]
    (if (= :end (get loc 1))
      (node loc)
      (let [p (up loc)]
        (if p
          (recur p)
          (node loc)))))

(defn right
  "Returns the loc of the right sibling of the node at this loc, or nil"
  [loc]
    (let [[node {l :l  [r & rrest :as rs] :r :as path}] loc]
      (when (and path rs)
        (with-meta [r (assoc path :l (conj l node) :r rrest)] ^loc))))

(defn left
  "Returns the loc of the left sibling of the node at this loc, or nil"
  [loc]
    (let [[node {l :l r :r :as path}] loc]
      (when (and path (seq l))
        (with-meta [(peek l) (assoc path :l (pop l) :r (cons node r))] ^loc))))

(defn insert-left
  "Inserts the item as the left sibling of the node at this loc,
 without moving"
  [loc item]
    (let [[node {l :l :as path}] loc]
      (if (nil? path)
        (throw (new Error "Insert at top"))
        (with-meta [node (assoc path :l (conj l item) :changed? true)] ^loc))))

(defn insert-right
  "Inserts the item as the right sibling of the node at this loc,
  without moving"
  [loc item]
    (let [[node {r :r :as path}] loc]
      (if (nil? path)
        (throw (new Error "Insert at top"))
        (with-meta [node (assoc path :r (cons item r) :changed? true)] ^loc))))

(defn replace
  "Replaces the node at this loc, without moving"
  [loc node]
    (let [[_ path] loc]
      (with-meta [node (assoc path :changed? true)] ^loc)))

(defn edit
  "Replaces the node at this loc with the value of (f node args)"
  [loc f & args]
    (replace loc (apply f (node loc) args)))

(defn insert-child
  "Inserts the item as the leftmost child of the node at this loc,
  without moving"
  [loc item]
    (replace loc (make-node loc (node loc) (cons item (children loc)))))

(defn append-child
  "Inserts the item as the rightmost child of the node at this loc,
  without moving"
  [loc item]
    (replace loc (make-node loc (node loc) (concat (children loc) [item]))))

(defn next
  "Moves to the next loc in the hierarchy, depth-first. When reaching
  the end, returns a distinguished loc detectable via end?. If already
  at the end, stays there."
  [loc]
    (if (= :end (get loc 1))
      loc
      (or 
       (and (branch? loc) (down loc))
       (right loc)
       (loop [p loc]
         (if (up p)
           (or (right (up p)) (recur (up p)))
           [(node p) :end])))))

(defn end?
  "Returns true if loc represents the end of a depth-first walk"
  [loc]
    (= :end (get loc 1)))

(defn remove
  "Removes the node at loc, returning the loc that would have preceded
  it in a depth-first walk."
  [loc]
    (let [[node {l :l, ppath :ppath, pnodes :pnodes, rs :r, :as path}] loc]
      (if (nil? path)
        (throw (new Error "Remove at top"))
        (if (pos? (count l)) 
          (with-meta [(peek l) (assoc path :l (pop l) :changed? true)] ^loc)
          (with-meta [(make-node loc (peek pnodes) rs) 
                      (and ppath (assoc ppath :changed? true))]
                     ^loc)))))
  
;;; tests

;; (defn run-tests []
;;   (let [data '[[a * b] + [c * d]]
;; 	dz (vector-zip data)]
;;     ;; find the second *
;;     (assert-true (= (-> dz down right right down right node) '*))
    
;;     ;; remove the first 2 terms
;;     (assert-true (= (-> dz next remove next remove root) '[[c * d]]))
    
;;     ;;replace * with /
;;     (assert-true (= (loop [loc dz] (if (end? loc) (root loc) (recur (next (if (= (node loc) '*) (replace loc '/) loc)))))
;; 		    '[[a / b] + [c / d]]))
    
;;     ;;remove * 
;;     (assert-true (= (loop [loc dz] (if (end? loc) (root loc) (recur (next (if (= (node loc) '*) (remove loc) loc)))))
;; 		    '[[a b] + [c d]]))
    
;;     ;;original is intact 
;;     (assert-true (= (root dz) '[[a * b] + [c * d]]))))

;; (run-tests)
