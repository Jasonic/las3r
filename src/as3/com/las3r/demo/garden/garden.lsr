;;   Copyright (c) Aemon Cannon. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
;;   which can be found in the file CPL.TXT at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(las3r.core/in-ns 'garden)
(las3r.core/refer 'las3r.core)
(las3r.core/refer 'las3r.flash)

(import '(flash.display Graphics Sprite DisplayObject)
	'(flash.events Event EventDispatcher)
	'(flash.utils Timer)
	'(flash.filters DropShadowFilter)
	)

(defn stage-w [] (. *stage* stageWidth))
(defn stage-h [] (. *stage* stageHeight))

(defstruct plant :x :y :sprite)

(defn new-random-plant []
  (struct plant 
	  (rand-int (stage-w)) 
	  (rand-int (stage-w))
	  (new Sprite)
	  ))

(defn add-drop-shadow! [s]
  (let [d (new DropShadowFilter 4, 0, 0x000000, 0.3, 3, 3, 1, 1, false, false, false)]
    (set! (. s filters) (to-array [d]))))

(defn update-plant [plant]
  (when (> (rand) 0.95)
    (let [x (get plant :x)
	  y (get plant :y)
	  host-sprite (get plant :sprite)
	  leaf-x (+ x (- (rand-int 20) (rand-int 40)))
	  leaf-y (+ y (- (rand-int 20) (rand-int 40)))
	  leaf-size (rand-int 20)
	  leaf-sprite (let [s (new Sprite)] 
			(. host-sprite (addChild s)) 
			(set! (. s x) leaf-x)
			(set! (. s y) leaf-y)
			(add-drop-shadow! s)
			s)
	  g (. leaf-sprite graphics)
	  ]
      (doto g
	(beginFill 0x00AA00 1.0)
	(drawCircle 0 0 leaf-size)
	(endFill))
      )))


(defn reset-plant [plant]
  (let [s (get plant :sprite)]
    (. (. s graphics) (clear))
    (. (. s parent) (removeChild s))
    (remove-all-children s)
    ))

(def *earth* (let [earth (new Object)
		   ground (new Sprite)
		   plants (for [i (range 50)] 
			    (new-random-plant))

		   update (fn [e]
			    (doseq plant plants
			      (update-plant plant)
			      ))

		   stop (fn []
			  (. (. ground graphics) (clear))
			  (doseq plant plants
			    (reset-plant plant))
			  (. *stage* (removeChild ground))
			  (. *stage* (removeEventListener "enterFrame" update))
			  )

		   start (fn []
			   (let [g (. ground graphics)]
			     (doto g
			       (beginFill 0x222222 1.0)
			       (drawRect 0 0 (stage-w) (stage-h))
			       (endFill)))
			   (doseq plant plants
			     (. ground (addChild (get plant :sprite))))
			   (. *stage* (addChildAt ground 0))
			   (. *stage* (addEventListener "enterFrame" update))
			   )
		   ]
	       (set! (. earth ground) ground)
	       (set! (. earth plants) plants)
	       (set! (. earth start) start)
	       (set! (. earth stop) stop)
	       earth
	       ))



(. *earth* (start))
;;(. *earth* (stop))