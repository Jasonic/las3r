;;   Copyright (c) Aemon Cannon. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
;;   which can be found in the file CPL.TXT at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(in-ns 'garden)
(las3r/refer 'las3r)

(import '(flash.display Graphics Sprite DisplayObject)
	'(flash.events Event EventDispatcher)
	'(flash.utils Timer))

(defn stage-w [] (. *stage* stageWidth))
(defn stage-h [] (. *stage* stageHeight))

(def *world* (let [w (new Object)] w))
(defn earth [] (. *world* earth))

(defn update [earth]
  (let [ground (. earth ground)
	g (. ground graphics)
	plants (. earth plants)]
    (doseq plant plants
      (let [x (get plant :x)
	    y (get plant :y)
	    leaf-x (+ x (- (rand-int 20) (rand-int 40)))
	    leaf-y (+ y (- (rand-int 20) (rand-int 40)))
	    leaf-size (rand-int 20)]
	(doto g
	  (beginFill 0x00AA00 1.0)
	  (drawCircle leaf-x leaf-y leaf-size)
	  (endFill))
	))
    )
)

(defn dispose-plant [earth plant])
(defn dispose-earth [earth]
  (doseq p (. earth plants) (dispose-plant earth p))
  (. (. earth ticker) (removeEventListener "timer" update))
  (. (. earth ticker) (stop))
  (. *stage* (removeChild (. earth ground)))
  )

(defn init []
  "The main entry point."
  (if (earth) (dispose-earth (earth)))
  (let [earth (new Object)
	ticker (new Timer 100)
	ticker-listener (fn [e] (update earth))
	ground (new Sprite)
	plants (for [i (range 50)] {:x (rand-int (stage-w)) :y (rand-int (stage-h))})
	]
    (. ticker (addEventListener "timer" ticker-listener))
    (set! (. earth ticker) ticker)
    (set! (. earth plants) plants)
    (set! (. earth ground) ground)
    (let [g (. ground graphics)]
      (doto g
	(beginFill 0x222222 1.0)
	(drawRect 0 0 (stage-w) (stage-h))
	(endFill)))
    (. *stage* (addChildAt ground 0))
    (set! (. *world* earth) earth)
    (. ticker (start))
    ))

(init)