;;   Copyright (c) Aemon Cannon. All rights reserved.
;;   The use and distribution terms for this software are covered by the
;;   Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
;;   which can be found in the file CPL.TXT at the root of this distribution.
;;   By using this software in any fashion, you are agreeing to be bound by
;;   the terms of this license.
;;   You must not remove this notice, or any other, from this software.

(las3r.core/in-ns 'garden)

(las3r.core/refer 'las3r.core)
(las3r.core/refer 'las3r.flash)

(import '(flash.display Graphics Sprite DisplayObject)
	'(flash.events Event EventDispatcher)
	'(flash.utils Timer)
	'(flash.filters DropShadowFilter)
	)

(defn stage-w [] (. *stage* stageWidth))
(defn stage-h [] (. *stage* stageHeight))

(defstruct plant :x :y :leaves)

(defn new-random-plant
  {:tag com.las3r.runtime.PersistentStructMap}
  []
  (let [x (rand-int (stage-w))
	y (rand-int (stage-w))
	leaves '()
	p (struct plant x y leaves)]
    p
    ))

(defn add-drop-shadow! [s]
  (let [d (new DropShadowFilter 4, 0, 0x000000, 0.3, 3, 3, 1, 1, false, false, false)]
    (set! (. s filters) (to-array [d]))))


(defn new-random-leaf 
  {:tag DisplayObject}
  [size]
  (let [s (new Sprite)
	g (. s graphics)
	]
    (doto g
      (lineStyle 1 0x009900 1.0)
      (beginFill 0x00AA00 1.0)
      (moveTo 0 0)
      (curveTo size 0 size size)
      (curveTo 0 size 0 0)
      (endFill))
    (set! (. s rotation) (rand-int 360))
    (add-drop-shadow! s)
    s
    ))


(defn update-plant [plant ground time]
  (when (< time 50)
    (let [x (get plant :x)
	  y (get plant :y)
	  leaf-size (* (- 1 (/ time 50)) (rand-int 50))
	  leaf (new-random-leaf leaf-size)
	  ]
      (. ground (addChild leaf))
      (set-pos! leaf x y)
      ))
  plant)


(def *earth* (let [
		   earth (new Object)
		   
		   update (fn [e]
			    (let [ground (. earth ground)
				  time (. earth time)
				  plants (. earth plants)]
			      (set! (. earth time) (inc time))
			      (set! (. earth plants) 
				    (map (fn [p] (update-plant p ground time)) plants))
			      (dorun (. earth plants))))

		   stop (fn []
			  (let [ground (. earth ground)
				plants (. earth plants)]
			    (set! (. earth time) 0)
			    (clear-graphics-of! ground)
			    (remove-all-children! ground)
			    (. *stage* (removeChild ground))
			    (. *stage* (removeEventListener "enterFrame" update))
			    ))

		   start (fn []
			   (let [ground (. earth ground)
				 g (. ground graphics)]
			     (doto g
			       (beginFill 0x222222 1.0)
			       (drawRect 0 0 (stage-w) (stage-h))
			       (endFill))
			     (. *stage* (addChildAt ground 0))
			     (. *stage* (addEventListener "enterFrame" update))
			     ))
		   ]

	       (set! (. earth time) 0)
	       (set! (. earth ground) (new Sprite))
	       (set! (. earth plants) (for [i (range 50)] (new-random-plant)))
	       (set! (. earth start) start)
	       (set! (. earth stop) stop)
	       earth
	       ))


(. *earth* (start))
;;(. *earth* (stop))